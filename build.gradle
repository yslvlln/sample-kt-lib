plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.3.61'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.3.61'
    //Needed plugin to upload kt lib in bintray
    id 'com.jfrog.bintray' version '1.8.4'
}
repositories {
    jcenter()
    mavenCentral()
}

def GROUP_ID = "com.yslvlln.gssi"
// The name you gave your package in bintray. In our example it would be:  def ARTIFACT_ID="kotlin-awesome-printer"
def ARTIFACT_ID = "kotlin-mp-heartbeat"
// What you named your repository in bintray. In our example it would be "myrepository"
def BINTRAY_REPOSITORY = "heartbeat-lib-k2"
//  Your public facing Bintray name. You can see your Bintray name on the top right corner in Bintray. I named it "guide" for our example.
def BINTRAY_ORGINIZATION = "ycosilvallana"
// A link to an issue tracker for the library, in our example: "https://github.com/natanfudge/KotlinAwesomePrinter/issues"
def ISSUE_URL = "https://github.com/yslvlln/sample-kt-lib/issues"
// A link to the library's site. In our example: "https://github.com/natanfudge/KotlinAwesomePrinter"
def SITE_URL = "https://github.com/yslvlln/sample-kt-lib"
// A link to the version control system (where the code is stored). In our example: "https://github.com/natanfudge/KotlinAwesomePrinter.git"
def VCS_URL = "https://github.com/yslvlln/sample-kt-lib.git"
// The current version of your library. You will need to update this value whenever you upload a new release. For example: 1.0
def LIBRARY_VERSION_NAME= 0.1

group 'com.yslvlln.gssi'
version '0.1.0'

apply plugin: 'maven-publish'
apply plugin: 'kotlinx-serialization'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'base'

def ktor_version = "1.3.0-rc"
def serialization_version = "0.14.0"
def coroutines_version = "1.3.3"

kotlin {
    jvm()
    // This is for iPhone emulator
    // Switch here to iosArm64 (or iosArm32) to build library for iPhone device
    iosX64("ios") {
        binaries {
            framework()
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
                implementation "io.ktor:ktor-client-core:$ktor_version"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serialization_version"
                implementation "io.ktor:ktor-client-json:$ktor_version"
                //Fix to Unresolved KotlinxSerializer
                //To use this feature, you need to include io.ktor:ktor-client-serialization-jvm artifact on the JVM and
                //io.ktor:ktor-client-serialization-native on iOS.
                implementation "io.ktor:ktor-client-serialization:$ktor_version"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutines_version"
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        jvmMain {
            dependencies {
                implementation kotlin('stdlib')
                //Needed by org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serialization_version
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$serialization_version"
                //Needed by io.ktor:ktor-client-serialization:$ktor_version
                implementation "io.ktor:ktor-client-serialization-jvm:$ktor_version"
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
            }
        }
        iosMain {
            dependencies {
                implementation "io.ktor:ktor-client-serialization-native:$ktor_version"
            }
        }
        iosTest {
        }
    }
}

afterEvaluate {
    project.publishing.publications.all {
        // rename artifacts
        groupId = GROUP_ID
        if (it.name.contains('metadata')) {
            artifactId = "$ARTIFACT_ID"
        } else {
            artifactId = "$ARTIFACT_ID-$name"
        }
    }
}

def getBintrayUserProperty() {
    return hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
}

def getBintrayApiKeyProperty() {
    return hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
}

bintray {
    //A user name of bintray to A, and API key of Bintray to B.I do not want to include API Key in git,
    // so I am gradle.properties writing locally.
    // Gradle's property file is read in the order of gradle in the home directory> gradle in the project directory,
    // so if it is written in property in the home directory, it will be useful for other projects as well.
    user = getBintrayUserProperty()
    key = getBintrayApiKeyProperty()
    //f you set publish to true, the new version will be published the moment you upload to bintray. If false, it will not be published unless you press the publish button on the bintray web.
    // It is recommended that you make it false because it can prevent an accident that you accidentally release the latest version.
    publish = false

    pkg {
        repo = BINTRAY_REPOSITORY
        name = ARTIFACT_ID
        userOrg = BINTRAY_ORGINIZATION
        licenses = ['Apache-2.0']
        vcsUrl = VCS_URL
        websiteUrl = SITE_URL
        issueTrackerUrl = ISSUE_URL

        version {
            name = LIBRARY_VERSION_NAME
            vcsTag = LIBRARY_VERSION_NAME
            released = new Date()
        }
    }
}

// This specifies the publications to upload to bintray before doing the bintrayUpload gradle task.
//In the mpp configuration of one module after 1.3,
// it is not uploaded unless you explicitly specify artifacts in publications like this.
// It is not necessary to have the findAll part,
// [project name]-kotlinMultiplatformbut a directory containing only pom files will be uploaded, so it is better to exclude it.
bintrayUpload.doFirst {
    publications = publishing.publications.collect {
        it.name
    }.findAll {
        it != "kotlinMultiplatform"
    }
}

//The task of bintrayUpload depends on publishToMavenLocal set in the previous section.
// This will create maven artifacts when running bintrayUplaod's task.
bintrayUpload.dependsOn publishToMavenLocal

task iosTest {
    def device = project.findProperty("iosDevice")?.toString() ?: "iPhone 8"
    dependsOn kotlin.targets.ios.binaries.getTest('DEBUG').linkTaskName
    group = JavaBasePlugin.VERIFICATION_GROUP
    description = "Runs tests for target 'ios' on an iOS simulator"

    doLast {
        def binary = kotlin.targets.ios.binaries.getTest('DEBUG').outputFile
        exec {
            commandLine 'xcrun', 'simctl', 'spawn', device, binary.absolutePath
        }
    }
}

configurations {
    compileClasspath
}